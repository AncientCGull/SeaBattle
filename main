#include <iostream>
#include <iomanip>
#include <cstdlib>
#include <ctime>
#include <vector>

typedef std::vector<std::vector<char> > matrix;
typedef unsigned int uint;

matrix *GetField ()
{
    matrix *Field = new matrix;
    if (NULL == Field)
        std::cout << "Memory error! Reload programm!\n" << std::endl;

    for (uint i = 0; i < 10; i ++)
    {
        Field->push_back(std::vector<char>());
        for (uint j = 0; j < 10; j ++)
            (Field->at(i)).push_back('~');
    }
}

void ShowField(matrix *Field)
{
    std::cout << "\n   A B C D E F G H I J" << std::endl;
    for (uint j = 0; j < 10; j ++)
    {
        std::cout << std::setw(2) << j;
        for (uint i = 0; i < 10; i ++)
            std::cout << std::setw(2) << Field->at(i).at(j);
        std::cout << std::endl;
    }
    std::cout << std::endl;
}

bool isCheck (matrix *FieldAlly, uint i1, uint j1, uint i2, uint j2)
{
    uint Temp;
    uint Temp1;

    if (i1 > 9 or i2 > 9 or j1 > 9 or j2 > 9)
        return false;

    if ((j1 != j2) and (i1 != i2))
        return false;

    if (((j2 - j1) > 3) or ((i2 - i1) > 3))
        return false;

    if (0 == i1)
        Temp = 0;
    else
        Temp = i1 - 1;

    if (0 == j1)
        Temp1 = 0;
    else
        Temp1 = j1 - 1;

    for (uint i = Temp; i <= i1 + 1; i ++)
        for (uint j = Temp1; j <= j1 + 1; j ++)
            if (10 > i and 10 > j)
                    if ('#' == FieldAlly->at(i).at(j))
                        return false;

    if (0 == i2)
        Temp = 0;
    else
        Temp = i2 - 1;

    if (0 == j2)
        Temp1 = 0;
    else
        Temp1 = j2 - 1;

    for (uint i = Temp; i <= i2 + 1; i ++)
        for (uint j = Temp1; j <= j2 + 1; j ++)
            if (10 > i and 10 > j)
                    if ('#' == FieldAlly->at(i).at(j))
                        return false;
}

void RandField (matrix *&Field)
{
    int Temp = rand()%3;
    switch (Temp)
    {
        case 0:
        {
            Field->at(3).at(0) = Field->at(4).at(0) = Field->at(5).at(0) = Field->at(6).at(0) = '#';
            Field->at(1).at(1) = Field->at(1).at(2) = Field->at(1).at(3) = '#';
            Field->at(3).at(7) = Field->at(4).at(7) = Field->at(5).at(7) = '#';
            Field->at(5).at(4) = Field->at(5).at(5) = '#';
            Field->at(8).at(6) = Field->at(9).at(6) = '#';
            Field->at(4).at(2) = Field->at(5).at(2) = '#';
            Field->at(0).at(6) = Field->at(9).at(2) = Field->at(7).at(9) = Field->at(3).at(5) = '#';
            break;

        }
        case 1:
        {
            Field->at(6).at(2) = Field->at(6).at(5) = Field->at(6).at(4) = Field->at(6).at(3) = '#';
            Field->at(2).at(1) = Field->at(3).at(1) = Field->at(4).at(1) = '#';
            Field->at(6).at(7) = Field->at(7).at(7) = Field->at(8).at(7) = '#';
            Field->at(4).at(5) = Field->at(4).at(6) = '#';
            Field->at(5).at(9) = Field->at(6).at(9) = '#';
            Field->at(1).at(3) = Field->at(2).at(3) = '#';
            Field->at(1).at(5) = Field->at(2).at(8) = Field->at(8).at(4) = Field->at(9).at(2) = '#';
            break;
        }
        default:
        {
            Field->at(4).at(2) = Field->at(4).at(3) = Field->at(4).at(4) = Field->at(4).at(5) = '#';
            Field->at(1).at(7) = Field->at(2).at(7) = Field->at(3).at(7) = '#';
            Field->at(6).at(0) = Field->at(7).at(0) = Field->at(8).at(0) = '#';
            Field->at(1).at(2) = Field->at(2).at(2) = '#';
            Field->at(1).at(5) = Field->at(2).at(5) = '#';
            Field->at(7).at(4) = Field->at(7).at(5) = '#';
            Field->at(6).at(2) = Field->at(9).at(2) = Field->at(9).at(7) = Field->at(6).at(8) = '#';
            break;
        }
    }
}

void Prepare (matrix *FieldAlly, matrix *FieldEnemy)
{
    uint Boof;
    int  BoatsPlaced = 0;
    int  ShipSize = 0;
    int  Mode = 0;
    int  ShipsPlaced [4] = {0, 0, 0, 0};
    char Coord [4] = {0, 0, 0, 0};

    system ("cls");
    std::cout << "Ship position" << std::endl;
    std::cout << "1 - Manually" << std::endl;
    std::cout << "2 - Randomly" << std::endl;
    std::cin >> Mode;

    switch (Mode)
    {
        case 1:
        {
            system ("cls");
            ShowField(FieldAlly);
            while (BoatsPlaced < 20)
            {
                std::cout << "\nExample: D6" << std::endl;
                std::cout << "\nBegin of the ship: ";
                for (int i = 0; i < 2; i ++)
                    std::cin >> Coord[i];
                std::cout << std::endl;

                std::cout << "End of the ship: ";
                for (int i = 2; i < 4; i ++)
                    std::cin >> Coord[i];
                std::cout << std::endl;
                system ("cls");

                uint j1 = (uint) Coord[0] - 65;
                uint i1 = (uint) Coord[1] - 48;
                uint j2 = (uint) Coord[2] - 65;
                uint i2 = (uint) Coord[3] - 48;

                if (j1 > j2)
                {
                    Boof = j1;
                    j1 = j2;
                    j2 = Boof;
                }


                if (i1 > i2)
                {
                    Boof = i1;
                    i1 = i2;
                    i2 = Boof;
                }

                if (isCheck (FieldAlly, j1, i1, j2, i2))
                {
                    for (uint i = i1; i <= i2; i ++)
                        for (uint j = j1; j <= j2; j ++)
                            ShipSize++;

                    if ((ShipSize != 0) and (ShipsPlaced[ShipSize - 1] != (5 - ShipSize)))
                    {
                        ShipsPlaced[ShipSize - 1] ++;
                        BoatsPlaced += ShipSize;

                        for (uint i = i1; i <= i2; i ++)
                            for (uint j = j1; j <= j2; j ++)
                                FieldAlly->at(j).at(i) = '#';
                        ShowField(FieldAlly);

                    }
                    else
                    {
                        ShowField(FieldAlly);
                        std::cout << "Incorrect ship! Try again!\n" << std::endl;
                    }
                }
                else
                {
                    ShowField(FieldAlly);
                    std::cout << "Incorrect ship! Try again!\n" << std::endl;
                }
                for (int i = 0; i < 4; i ++)
                {
                    Coord[i] = 0;
                    std::cout << "You haven't placed " << 4 - i - ShipsPlaced[i] << " " << i + 1 << " boat ships" << std::endl;
                }
                ShipSize = 0;
            }
            break;
        }

        case 2:
        {
            system ("cls");
            RandField(FieldAlly);
            ShowField(FieldAlly);
            break;
        }

        default:
        {
            std::cout << "Unknown mode!\n" << std::endl;
            system("pause");
            Prepare(FieldAlly, FieldEnemy);
        }
    }
    RandField(FieldEnemy);
}

bool isYourTurn (matrix *FieldEnemy, matrix *&FieldEmpty)
{
    bool isCheck;
    char i;
    char j;

    do
    {
        isCheck = true;
        system("cls");
        ShowField(FieldEmpty);
        std::cout << "\nShoot!\n";
        std::cin >> i >> j;

        uint c1 = (uint) i - 65;
        uint c2 = (uint) j - 48;

        if ((i < 75 and i > 64) and (j < 58 and j > 47) and ('~' == FieldEmpty->at(c1).at(c2)))
        {
            if('#' == FieldEnemy->at(c1).at(c2))
            {
                FieldEmpty->at(c1).at(c2) = '@';
                std::cout << "Injured.\n" << std::endl;
                return true;
            }
            else
            {
                FieldEmpty->at(c1).at(c2) = '*';
                std::cout << "Miss.\n" << std::endl;
            }
        }
        else
        {
            std::cout << "Incorrect coords. Try again\n" << std::endl;
            system("pause");
            system("cls");
            isCheck = false;
        }
    }
    while (!isCheck);

    system("cls");
    ShowField(FieldEmpty);
    system("pause");
    return false;
}

bool isEnemyTurn (matrix *&FieldAlly, uint &i, uint &j)
{
    char a;
    char b;
    bool c = true;

    system("cls");
    if (10 != i and  10 != j)
    {
        if ((9 > i) and (0 < i))
        {
            if ('@' == FieldAlly->at(i + 1).at(j))
            {
                i --;
                c = false;
            }
            if ('@' == FieldAlly->at(i - 1).at(j))
            {
                i ++;
                c = false;
            }
        }

        if ((9 > j) and (0 < j))
        {
            if ('@' == FieldAlly->at(i).at(j + 1))
            {
                j --;
                c = false;
            }
            if ('@' == FieldAlly->at(i).at(j - 1))
            {
                j ++;
                c = false;
            }
        }

        if (c)
        {
            int Choice = rand()%4;
            switch(Choice)
            {
                case 0:
                {
                    if (9 > i)
                    {
                        i ++;
                        break;
                    }
                }
                case 1:
                {
                    if (0 < i)
                    {
                        i --;
                        break;
                    }
                }
                case 2:
                {
                    if (9 > j)
                    {
                        j ++;
                        break;
                    }
                }
                default:
                {
                    if (0 < j)
                    {
                        j --;
                        break;
                    }
                }
            }
        }
    }

    else
    {
        i = rand()%10;
        j = rand()%10;
    }

    switch (FieldAlly->at(i).at(j))
    {
        case '~':
        {
            FieldAlly->at(i).at(j) = '*';
            ShowField(FieldAlly);
            a = j + 48;
            b = i + 65;
            std::cout << b << a << " Miss.\n" << std::endl;
            i = 10;
            j = 10;
            system("pause");
            return false;
        }
        case '#':
        {
            FieldAlly->at(i).at(j) = '@';
            ShowField(FieldAlly);
            a = j + 48;
            b = i + 65;
            std::cout << b << a << " Injured.\n" << std::endl;
            system("pause");
            return true;
        }
        default:
        {
            i = 10;
            j = 10;
            return isEnemyTurn (FieldAlly, i, j);
        }
    }
}

void Game (matrix *&FieldAlly, matrix *&FieldEnemy)
{
    uint i = 10;
    uint j = 10;
    int  NumA = 0;
    int  NumE = 0;

    system("cls");
    matrix* FieldEmpty = GetField();

    while ((20 != NumA) and (20 != NumE))
    {
        while(isYourTurn (FieldEnemy, FieldEmpty))
            NumA ++;
        while(isEnemyTurn (FieldAlly, i, j))
            NumE ++;
    }

    if (20 == NumA)
    {
        std::cout << "\nYou win!\n";
        system("pause");
    }
    else
    {
        std::cout << "\nYou died!\nCheck your opponent`s ships\n";
        ShowField(FieldEnemy);
        system("pause");
    }
     FieldEmpty->clear();
}

int main ()
{
    matrix* FieldAlly = GetField();
    matrix* FieldEnemyFull = GetField();
    int     Check = 0;

    srand(time(NULL));
    std::cout << "Menu" << std::endl;
    std::cout << "1 - New game" << std::endl;
    std::cout << "2 - Rules" << std::endl;
    std::cout << "3 - Exit" << std::endl;
    std::cin >> Check;

    switch(Check)
    {
        case 1:
        {
            Prepare (FieldAlly, FieldEnemyFull);
            break;
        }
        case 2:
        {
            std::cout << "empt='~', miss='*', alien='#', hit='@'\n" ;
            system("pause");
            return 1;
        }
        case 3:
        {
            std::cout << "Thanks for game!\n" ;
            system("pause");
            return 1;
        }
        default:
        {
            std::cout << "No such var\n" ;
            system("pause");
            return 0;
        }
    }

    std::cout << std::endl;
    system("pause");

    Game (FieldAlly, FieldEnemyFull);

    FieldAlly->clear();
    FieldEnemyFull->clear();
    return 1;
}
